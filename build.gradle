buildscript {
	ext {
		springBootVersion = '1.3.1.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('org.hidetake:gradle-ssh-plugin:0.4.2')
		classpath("com.bmuschko:gradle-cargo-plugin:2.2.2")
		//classpath('org.flywaydb:flyway-gradle-plugin:4.0') 
		//classpath('org.gradle.api.plugins:gradle-cargo-plugin:0.6.1')
	}
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'
apply plugin: 'application'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'com.bmuschko.cargo'
//apply plugin: 'org.flywaydb.flyway'
//apply plugin: "com.gorylenko.gradle-git-properties"
//apply plugin: 'cargo'

sourceCompatibility = 1.7
targetCompatibility = 1.7
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

jar {
    //baseName = 'gs-messaging-stomp-websocket'
    //version =  '0.1.0'
}

war {
}

repositories {
	mavenCentral()
	jcenter()
	flatDir {
        dirs 'lib'
    }
}

uploadArchives {
	repositories {
		flatDir {
			dirs "repos"
		}
	}
}

configurations {
	providedRuntime
}

remotes {
  web_test {
    host = '10.10.200.207'
    user = 'root'
    password = 'adminme09@'
    knownHosts = allowAnyHosts
  }
}

eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.springframework.boot:spring-boot-devtools')
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web') {
	 //exclude module: "spring-boot-starter-tomcat"
	}
	compile("org.springframework.boot:spring-boot-starter-websocket")
	compile('org.quartz-scheduler:quartz:2.2.2')
	compile('org.springframework:spring-context-support')
	
	/*
	compile("ch.qos.logback:logback-classic:1.1.2")
	compile("ch.qos.logback:logback-core:1.1.2")
	compile("org.slf4j:slf4j-api:1.7.6")
	compile('org.projectlombok:lombok:1.16.6')
	*/
	compile('io.springfox:springfox-swagger2:2.3.1')
	compile('io.springfox:springfox-swagger-ui:2.3.1')
    compile('javax.servlet:jstl')
 	compile('net.sf.json-lib:json-lib:2.4:jdk15')
 	
 	//compileOnly('javax.servlet:servlet-api:2.5')
 	
 	runtime('mysql:mysql-connector-java')
	
	providedCompile('javax.servlet:javax.servlet-api')
	providedRuntime('org.apache.tomcat.embed:tomcat-embed-jasper') 		
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	
	testCompile('org.springframework.boot:spring-boot-starter-test') 
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}

def testGroup = 'group'

task woo(group:'testGroup') << {
	println "woo"
}

task hi(group:'testGroup', description:'하이', dependsOn:'woo') << {
    println "hi ${project.name}"
}

task deployRemote << {
	def project_name = project.name
	def war_file = "${project.libsDir}/${project_name}.war"
	def tomcat_home = '/usr/local/blazeds/tomcat'
	ssh.run {
		session(remotes.web_test) {
			println "WAR파일전송"
			put(war_file, tomcat_home)
			excuteSudo("service tomcat stop")
			excuteSudo("rm -rf ${tomcat_home}/webapps/${project_name}.war")
			excuteSudo("rm -rf ${tomcat_home}/webapps/${project_name}")
			excuteSudo("mv ${tomcat_home}/${project_name}.war ${tomcat_home}/wabapps/")
			excuteSudo("service tomcat start")
		}
	}
}

task deployLocal() << {
	def tomcat_home = '/usr/local/blazeds/tomcat'
    copy {
      from project.libsDir
      into "${tomcatHome}/webapps"
      include '*.war'
    }
}
  
task srcZip(type:Zip) {
  	from sourceSets*.allSource
  	destinationDir = file("repos")
  	archiveName = "$project.name-src.zip"
}